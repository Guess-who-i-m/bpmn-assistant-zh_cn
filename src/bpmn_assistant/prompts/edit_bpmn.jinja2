{% include 'bpmn_representation.jinja2' %}

{% include 'bpmn_examples.jinja2' %}

---

# 流程编辑函数

- `delete_element(element_id)`
- `redirect_branch(branch_condition, next_id)`
- `add_element(element, before_id=None, after_id=None)`
- `move_element(element_id, before_id=None, after_id=None)`
- `update_element(new_element)`

**重点:** 所有修改必须生成符合示例规范的合法BPMN模型，并遵循上面所提供案例的模式。

1. `delete_element` - 删除流程中的指定元素

**参数:**
- `element_id`: 目标元素在流程中的唯一标识符

2. `redirect_branch` - 重定向独占网关的分支流向

**参数:**
- `branch_condition`: 需要重定向的分支条件（需与流程定义完全匹配）
- `next_id`: 流程重定向的目标元素ID

3. `add_element` - 向流程添加新元素

**参数:**
- `element`: 待添加元素的对象表示
- `before_id`:（可选）新元素插入位置的锚点前元素ID
- `after_id`:（可选）新元素插入位置的锚点后元素ID

**注意:** before_id和after_id两个参数只能提供一个参数。添加网关时必须完整定义其内部结构。

4. `move_element` - 调整元素在流程中的位置

**参数:**
- `element_id`: 待移动元素的唯一标识符
- `before_id`:（可选）移动后的前置锚点元素ID
- `after_id`:（可选）移动后的后置锚点元素ID

**注意:** before_id和after_id两个参数只能提供一个参数。

5. `update_element` - 更新现有元素属性

**参数:**
- `new_element`: 包含更新后属性的元素对象

**注意:** 新元素的id必须和待更新属性的元素的id对应一致。

---

# 函数调用示例

```json
{
  "function": "update_element",
  "arguments": {
      "new_element": {
          "type": "task",
          "id": "task1", // 要更新的元素的id
          "label": "更新后的任务描述"
      }
  }
}
```

```json
{
  "function": "add_element",
  "arguments": {
    "element": {
          "type": "task",
          "id": "newTaskId",
          "label": "更新后的任务描述"
    },
    "before_id": "task1"
  }
}
```

```json
{
  "function": "add_element",
  "arguments": {
    "element": {
      "type": "parallelGateway",
      "id": "parallel1",
      "branches": [
        [
          {
            "type": "task",
            "id": "docTask1",
            "label": "回顾文档"
          },
        ],
        [
          {
            "type": "serviceTask",
            "id": "notifyTask1",
            "label": "发送邮件提醒"
          },
        ]
      ]
    },
    "after_id": "task5"
  }
}
```

```json
{
  "function": "delete_element",
  "arguments": {
    "element_id": "exclusive2"
  }
}
```

```json
{
  "function": "redirect_branch",
  "arguments": {
    "branch_condition": "Product is out of stock",
    "next_id": "task3"
  }
}
```

---

# 当前流程状态的JSON表示格式

```json
{{ process }}
```

# 流程需要执行的变更

```
{{ change_request }}
```

执行策略:

- 单次仅执行一个函数调用
- 从首个必要修改开始逐步实施
- 确保每次调用后流程保持合法状态
- 从第一个函数开始调用
